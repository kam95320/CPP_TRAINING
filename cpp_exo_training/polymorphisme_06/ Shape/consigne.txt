# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    consigne.txt                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: kahoumou <kahoumou@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/05/07 17:22:11 by kahoumou          #+#    #+#              #
#    Updated: 2025/05/07 17:22:56 by kahoumou         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

üöÄ Exercice avanc√© : Gestion de Formes G√©om√©triques
üéØ Objectif :

Cr√©er un programme qui g√®re diff√©rentes formes g√©om√©triques (carr√©, cercle, rectangle) en utilisant le polymorphisme.
üß© Plan de l'exercice :

    Classe de base : Shape

        M√©thode virtuelle pure :

            virtual void draw() const = 0;

        M√©thode virtuelle pure pour le calcul de l'aire :

            virtual double area() const = 0;

    Classes d√©riv√©es :

        Square :

            Attribut : side (c√¥t√©).

            Red√©finition de draw() : afficher "Dessine un carr√©".

            Red√©finition de area() : retourner side * side.

        Circle :

            Attribut : radius (rayon).

            Red√©finition de draw() : afficher "Dessine un cercle".

            Red√©finition de area() : retourner 3.14159 * radius * radius.

        Rectangle :

            Attributs : width et height.

            Red√©finition de draw() : afficher "Dessine un rectangle".

            Red√©finition de area() : retourner width * height.

üìù Fonction principale :

    Cr√©er un tableau de pointeurs de type Shape*.

    Ajouter un carr√©, un cercle et un rectangle dans le tableau.

    Pour chaque forme :

        Appeler la m√©thode draw().

        Afficher son aire avec la m√©thode area().

    Lib√©rer la m√©moire √† la fin.

üí° Conseils :

    Sois attentif aux fuites m√©moire, pense bien √† supprimer chaque objet cr√©√©.

    Utilise virtual pour garantir que les m√©thodes sont red√©finies correctement.

    Respecte les bonnes pratiques de polymorphisme en utilisant des pointeurs de la classe de base.